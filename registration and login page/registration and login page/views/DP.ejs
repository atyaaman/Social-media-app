<%- include('partials/header'); -%>


    <div>
        <blockquote>
            <h2>Dynamic Programming</h2>
            <p>Dynamic Programming is mainly an optimization over plain <a href=/Recursion>recursion</a>. Wherever we
                see a recursive solution
                that has repeated calls for same inputs, we can optimize it using Dynamic Programming. The idea is to
                simply store the results of subproblems, so that we do not have to re-compute them when needed later.
                This simple optimization reduces time complexities from exponential to polynomial.</p>
            <p>For example, if we write simple recursive solution for Fibonacci Numbers, we get
                exponential time complexity and if we optimize it by storing solutions of subproblems, time complexity
                reduces to linear.</p>
            <p><img src=https://media.geeksforgeeks.org/wp-content/cdn-uploads/Dynamic-Programming-1-1024x512.png
                    alt=dynamic-programming width=665 height=333 class="alignnone size-large wp-image-249650"
                    srcset="https://www.geeksforgeeks.org/wp-content/uploads/Dynamic-Programming-1-1024x512.png 1024w, https://www.geeksforgeeks.org/wp-content/uploads/Dynamic-Programming-1-300x150.png 300w, https://www.geeksforgeeks.org/wp-content/uploads/Dynamic-Programming-1-768x384.png 768w, https://www.geeksforgeeks.org/wp-content/uploads/Dynamic-Programming-1-660x330.png 660w, https://www.geeksforgeeks.org/wp-content/uploads/Dynamic-Programming-1.png 1600w"
                    sizes="(max-width: 665px) 100vw, 665px"></p>
            <blockquote>
                <p><strong>Dynamic Programming</strong> (DP) is a technique that solves some particular type of problems
                    in <strong>Polynomial Time</strong>. Dynamic Programming solutions are faster than the exponential
                    brute method and can be easily proved their correctness.</p>
            </blockquote>
            <h3>To dynamically solve a problem, we need to check necessary conditions:&nbsp;</h3>
            <ol>
                <li><a href="/Overlapping">Overlapping Subproblems</a>:
                    W<span style=background-color:#fff;color:#273239>hen the solutions to the same subproblems are
                        needed repetitively for solving the actual problem. The problem is said to have overlapping
                        subproblems property.</span></li>
            </ol>
            <h2>Steps to solve a Dynamic programming problem:</h2>
            <ol>
                <li>Identify if it is a Dynamic programming problem.</li>
                <li>Decide a state expression with the Least parameters.</li>
                <li>Formulate state and transition relationship.</li>
                <li>Do tabulation (or memorization).</li>
            </ol>
            <h3>Step 1: How to classify a problem as a Dynamic Programming Problem?&nbsp;</h3>
            <ul>
                <li>Typically, all the problems that require <strong>maximizing or minimizing</strong> certain
                    quantities or counting problems that say to count the arrangements under certain conditions or
                    certain probability problems can be solved by using Dynamic Programming.</li>
                <li>All dynamic programming problems satisfy the <strong>overlapping subproblems</strong> property and
                    most of the classic Dynamic &nbsp;programming problems also satisfy the <strong>optimal
                        substructure</strong> property. Once we observe these properties in a given problem be sure that
                    it can be solved using Dynamic Programming.</li>
            </ul>
            <h3>Step 2: Deciding the state</h3>
            <p>Dynamic Programming problems are all about the <strong>state</strong> and its
                <strong>transition</strong>. This is the most basic step which must be done very carefully because the
                state transition depends on the choice of state definition you make.
            </p>
            <div id=GFG_AD_gfg_mobile_336x280></div>
            <p><strong>State:</strong></p>
            <p>A state can be defined as the set of<strong> parameters</strong> that can uniquely identify a certain
                position or standing in the given problem. This set of parameters should be as small as possible to
                reduce state space.&nbsp;</p>
            <p><strong>Example:</strong></p>
            <p>In our famous Knapsack
                problem, we define our state by two parameters <strong>index</strong> and <strong>weight</strong>
                i.e DP[index][weight]. Here DP[index][weight] tells us the maximum profit it can make by taking items
                from range 0 to index having the capacity of sack to be weight. Therefore, here the parameters
                <strong>index </strong>and <strong>weight </strong>together can uniquely identify a subproblem for the
                knapsack problem.
            </p>
            <p>The first step to solving a Dynamic Programming problem will be deciding on a state for the problem after
                identifying that the problem is a Dynamic Programming problem. As we know Dynamic Programming is all
                about using calculated results to formulate the final result.&nbsp;<br>So, our next step will be to find
                a <strong>relation between</strong> <strong>previous states to reach the current state</strong>.&nbsp;
            </p>
            <h3>Step 3: Formulating a relation among the states&nbsp;</h3>
            <p>This part is the hardest part of solving a Dynamic Programming problem and requires a lot of intuition,
                observation, and practice.</p>
            <p><strong>Example:&nbsp;</strong></p>
            <p>Given 3 numbers {1, 3, 5}, The task is to tell the total number of ways we can form a number
                <strong>N</strong> using the sum of the given three numbers. (allowing repetitions and different
                arrangements).
            </p>
            <blockquote>
                <p>The total number of ways to form 6 is:
                    8<br>1+1+1+1+1+1<br>1+1+1+3<br>1+1+3+1<br>1+3+1+1<br>3+1+1+1<br>3+3<br>1+5<br>5+1</p>
            </blockquote>
            <p>The steps to solve the given problem will be:</p>
            <ul>
                <li>We decide a state for the given problem.&nbsp;</li>
                <li>We will take a parameter <strong>N</strong> to decide the state as it uniquely identifies any
                    subproblem.&nbsp;</li>
                <li>DP state will look like <strong>state(N),</strong> state(N) means the total number of arrangements
                    to form <strong>N</strong> by using {1, 3, 5} as elements. Derive a transition relation between any
                    two states.</li>
                <li>Now, we need to compute state(N).&nbsp;</li>
            </ul>
            <p><strong>How to Compute the state?&nbsp;</strong></p>
            <div style="text-align:center;margin:20px 0" id=GFG_AD_gfg_outstream_incontent></div>
            <p>As we can only use 1, 3, or 5 to form a given number <strong>N</strong>. Let us assume that we know the
                result for N = 1,2,3,4,5,6&nbsp;<br>Let us say we know the result for:<br>state (n = 1), state (n = 2),
                state (n = 3) &#8230;&#8230;&#8230; state (n = 6)&nbsp;<br>Now, we wish to know the result of the state
                (n = 7). See, we can only add 1, 3, and 5. Now we can get a sum total of 7 in the following 3 ways:</p>
            <blockquote>
                <p><strong>1) Adding 1 to all possible combinations of state (n = 6)</strong>&nbsp;<br>Eg : [
                    (1+1+1+1+1+1) + 1]&nbsp;<br>[ (1+1+1+3) + 1]&nbsp;<br>[ (1+1+3+1) + 1]&nbsp;<br>[ (1+3+1+1) +
                    1]&nbsp;<br>[ (3+1+1+1) + 1]&nbsp;<br>[ (3+3) + 1]&nbsp;<br>[ (1+5) + 1]&nbsp;<br>[ (5+1) + 1]&nbsp;
                </p>
                <p><strong>2) Adding 3 to all possible combinations of state (n = 4);</strong><br>[(1+1+1+1) +
                    3]&nbsp;<br>[(1+3) + 3]&nbsp;<br>[(3+1) + 3]&nbsp;</p>
                <p><strong>3) Adding 5 to all possible combinations of state(n = 2)</strong>&nbsp;<br>[ (1+1) + 5]</p>
                <p><i>(Note how it sufficient to add only on the right-side &#8211; all the add-from-left-side cases are
                        covered, either in the same state, or another, e.g. [ 1+(1+1+1+3)] &nbsp;is not needed in state
                        (n=6) because it&#8217;s covered by state (n = 4) [(1+1+1+1) + 3])</i></p>
                <p>Now, think carefully and satisfy yourself that the above three cases are covering all possible ways
                    to form a sum total of 7;<br>Therefore, we can say that result for&nbsp;<br>state(7) = state (6) +
                    state (4) + state (2)&nbsp;<br>OR<br>state(7) = state (7-1) + state (7-3) + state (7-5)<br>In
                    general,&nbsp;<br><strong>state(n) = state(n-1) + state(n-3) + state(n-5)</strong></p>
            </blockquote>
            <p>Below is the implementation of the above approach:</p>
            <div class=noIdeBtnDiv>
                <div class=responsive-tabs>
                    <h2 class=tabtitle>C++</h2>
                    <div class=tabcontent>
                        </p>
                        <div class=code-block>
                            <div class=code-container>
                                <div id=highlighter_631187 class="syntaxhighlighter nogutter">
                                    <table border=0 cellpadding=0 cellspacing=0>
                                        <tbody>
                                            <tr>
                                                <td class=code>
                                                    <div class=container>
                                                        <div class="line number1 index0 alt2"><code
                                                                class=comments>// Returns the number of arrangements to</code>
                                                        </div>
                                                        <div class="line number2 index1 alt1"><code
                                                                class=comments>// form 'n'</code></div>
                                                        <div class="line number3 index2 alt2"><code
                                                                class="color1 bold">int</code> <code
                                                                class=plain>solve(</code><code
                                                                class="color1 bold">int</code>
                                                            <code class=plain>n)</code>
                                                        </div>
                                                        <div class="line number4 index3 alt1"><code class=plain>{</code>
                                                        </div>
                                                        <div class="line number5 index4 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class=comments>// base case</code></div>
                                                        <div class="line number6 index5 alt1"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class="keyword bold">if</code> <code
                                                                class=plain>(n &lt; 0)</code></div>
                                                        <div class="line number7 index6 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                class="keyword bold">return</code> <code
                                                                class=plain>0;</code>
                                                        </div>
                                                        <div class="line number8 index7 alt1"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class="keyword bold">if</code> <code
                                                                class=plain>(n == 0)&nbsp;</code></div>
                                                        <div class="line number9 index8 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                class="keyword bold">return</code> <code
                                                                class=plain>1;&nbsp;</code></div>
                                                        <div class="line number10 index9 alt1">&nbsp;</div>
                                                        <div class="line number11 index10 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class="keyword bold">return</code> <code
                                                                class=plain>solve(n-1) + solve(n-3) + solve(n-5);</code>
                                                        </div>
                                                        <div class="line number12 index11 alt1"><code
                                                                class=plain>}&nbsp;&nbsp;&nbsp;</code></div>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class=code-editor-container></div>
                            </p>
                        </div>
                        <div class=code-output-container>
                            <div class=output-block><i id=output-icon title=Output
                                    class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
                                </p>
                                <pre class=output-pre></pre>
                                </p>
                            </div>
                            <div class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL"
                                    class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
                                </p>
                                <pre id=ide-url></pre>
                                </p>
                            </div>
                            </p>
                        </div>
                    </div>
                    <h2 class=tabtitle>Java</h2>
                    <div class=tabcontent>
                        <div class=code-block>
                            <div class=code-container>
                                <div id=highlighter_750984 class="syntaxhighlighter nogutter">
                                    <table border=0 cellpadding=0 cellspacing=0>
                                        <tbody>
                                            <tr>
                                                <td class=code>
                                                    <div class=container>
                                                        <div class="line number1 index0 alt2"><code
                                                                class=comments>// Returns the number of arrangements to</code>
                                                        </div>
                                                        <div class="line number2 index1 alt1"><code
                                                                class=comments>// form 'n'</code></div>
                                                        <div class="line number3 index2 alt2"><code
                                                                class=keyword>static</code>
                                                            <code class=keyword>int</code> <code
                                                                class=plain>solve(</code><code class=keyword>int</code>
                                                            <code class=plain>n)</code>
                                                        </div>
                                                        <div class="line number4 index3 alt1"><code class=plain>{</code>
                                                        </div>
                                                        <div class="line number5 index4 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class=comments>// base case</code></div>
                                                        <div class="line number6 index5 alt1"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class=keyword>if</code> <code
                                                                class=plain>(n &lt; </code><code
                                                                class=value>0</code><code class=plain>)</code></div>
                                                        <div class="line number7 index6 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                class=keyword>return</code> <code
                                                                class=value>0</code><code class=plain>;</code></div>
                                                        <div class="line number8 index7 alt1"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class=keyword>if</code> <code
                                                                class=plain>(n == </code><code class=value>0</code><code
                                                                class=plain>)&nbsp;</code></div>
                                                        <div class="line number9 index8 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                class=keyword>return</code> <code
                                                                class=value>1</code><code class=plain>;&nbsp;</code>
                                                        </div>
                                                        <div class="line number10 index9 alt1">&nbsp;</div>
                                                        <div class="line number11 index10 alt2"><code
                                                                class="undefined spaces">&nbsp;&nbsp;&nbsp;</code><code
                                                                class=keyword>return</code> <code
                                                                class=plain>solve(n-</code><code
                                                                class=value>1</code><code
                                                                class=plain>) + solve(n-</code><code
                                                                class=value>3</code><code
                                                                class=plain>) + solve(n-</code><code
                                                                class=value>5</code><code class=plain>);</code></div>
                                                        <div class="line number12 index11 alt1"><code
                                                                class=plain>}&nbsp;&nbsp;&nbsp;</code></div>
                                                        <div class="line number13 index12 alt2">&nbsp;</div>
                                                    </div>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            <div class=code-editor-container></div>
                            </p>
                        </div>
                        <div class=code-output-container>
                            <div class=output-block><i id=output-icon title=Output
                                    class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
                                </p>
                                <pre class=output-pre></pre>
                                </p>
                            </div>
                            <div class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL"
                                    class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
                                </p>
                                <pre id=ide-url></pre>
                                </p>
                            </div>
                            </p>
                        </div>
                    </div>
                    <p><strong>Time Complexity:</strong> O(3<sup>N</sup>), As at every stage we need to take three
                        decisions and
                        the height of the tree will be of the order of n.<br><strong>Auxiliary Space:</strong> O(N), The
                        extra
                        space is used due to the recursion call stack.</p>
                    <p>The above code seems exponential as it is calculating the same state again and again. So, we just
                        need to
                        add <strong>memoization</strong>.&nbsp;</p>
                    <h3>Step 4: Adding memoization or tabulation for the state</h3>
                    <p>This is the easiest part of a dynamic programming solution. We just need to store the state
                        answer so
                        that the next time that state is required, we can directly use it from our memory.</p>
                    <div style="text-align:center;margin:20px 0" id=GFG_AD_gfg_outstream_incontent></div>
                    <p>Adding memoization to the above code</p>
                    <div class=noIdeBtnDiv>
                        <div class=responsive-tabs>
                            <h2 class=tabtitle>C++</h2>
                            <div class=tabcontent>
                                </p>
                                <div class=code-block>
                                    <div class=code-container>
                                        <div id=highlighter_526164 class="syntaxhighlighter nogutter">
                                            <table border=0 cellpadding=0 cellspacing=0>
                                                <tbody>
                                                    <tr>
                                                        <td class=code>
                                                            <div class=container>
                                                                <div class="line number1 index0 alt2"><code
                                                                        class=comments>// initialize to -1</code></div>
                                                                <div class="line number2 index1 alt1"><code
                                                                        class="color1 bold">int</code> <code
                                                                        class=plain>dp[MAXN];</code></div>
                                                                <div class="line number3 index2 alt2">&nbsp;</div>
                                                                <div class="line number4 index3 alt1"><code
                                                                        class=comments>// this function returns the number of</code>
                                                                </div>
                                                                <div class="line number5 index4 alt2"><code
                                                                        class=comments>// arrangements to form 'n'</code>
                                                                </div>
                                                                <div class="line number6 index5 alt1"><code
                                                                        class="color1 bold">int</code> <code
                                                                        class=plain>solve(</code><code
                                                                        class="color1 bold">int</code> <code
                                                                        class=plain>n)</code></div>
                                                                <div class="line number7 index6 alt2"><code
                                                                        class=plain>{</code>
                                                                </div>
                                                                <div class="line number8 index7 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// base case</code></div>
                                                                <div class="line number9 index8 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">if</code> <code
                                                                        class=plain>(n &lt; 0)&nbsp;</code></div>
                                                                <div class="line number10 index9 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">return</code> <code
                                                                        class=plain>0;</code></div>
                                                                <div class="line number11 index10 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">if</code> <code
                                                                        class=plain>(n == 0)</code></div>
                                                                <div class="line number12 index11 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">return</code> <code
                                                                        class=plain>1;</code></div>
                                                                <div class="line number13 index12 alt2">&nbsp;</div>
                                                                <div class="line number14 index13 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// checking if already calculated</code>
                                                                </div>
                                                                <div class="line number15 index14 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">if</code> <code
                                                                        class=plain>(dp[n]!=-1)</code></div>
                                                                <div class="line number16 index15 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">return</code> <code
                                                                        class=plain>dp[n];</code></div>
                                                                <div class="line number17 index16 alt2">&nbsp;</div>
                                                                <div class="line number18 index17 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// storing the result and returning</code>
                                                                </div>
                                                                <div class="line number19 index18 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class="keyword bold">return</code> <code
                                                                        class=plain>dp[n] = solve(n-1) + solve(n-3) + solve(n-5);</code>
                                                                </div>
                                                                <div class="line number20 index19 alt1"><code
                                                                        class=plain>}</code></div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class=code-editor-container></div>
                                    </p>
                                </div>
                                <div class=code-output-container>
                                    <div class=output-block><i id=output-icon title=Output
                                            class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
                                        </p>
                                        <pre class=output-pre></pre>
                                        </p>
                                    </div>
                                    <div class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL"
                                            class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
                                        </p>
                                        <pre id=ide-url></pre>
                                        </p>
                                    </div>
                                    </p>
                                </div>
                            </div>
                            <h2 class=tabtitle>Java</h2>
                            <div class=tabcontent>
                                <div class=code-block>
                                    <div class=code-container>
                                        <div id=highlighter_503992 class="syntaxhighlighter nogutter">
                                            <table border=0 cellpadding=0 cellspacing=0>
                                                <tbody>
                                                    <tr>
                                                        <td class=code>
                                                            <div class=container>
                                                                <div class="line number1 index0 alt2"><code
                                                                        class=comments>// initialize to -1</code></div>
                                                                <div class="line number2 index1 alt1"><code
                                                                        class=keyword>public</code> <code
                                                                        class=keyword>static</code> <code
                                                                        class=keyword>int</code><code
                                                                        class=plain>[] dp = </code><code
                                                                        class=keyword>new</code> <code
                                                                        class=keyword>int</code><code
                                                                        class=plain>[MAXN];</code>
                                                                </div>
                                                                <div class="line number3 index2 alt2">&nbsp;</div>
                                                                <div class="line number4 index3 alt1"><code
                                                                        class=comments>// this function returns the number of</code>
                                                                </div>
                                                                <div class="line number5 index4 alt2"><code
                                                                        class=comments>// arrangements to form 'n'</code>
                                                                </div>
                                                                <div class="line number6 index5 alt1"><code
                                                                        class=keyword>static</code> <code
                                                                        class=keyword>int</code> <code
                                                                        class=plain>solve(</code><code
                                                                        class=keyword>int</code>
                                                                    <code class=plain>n)</code>
                                                                </div>
                                                                <div class="line number7 index6 alt2"><code
                                                                        class=plain>{</code>
                                                                </div>
                                                                <div class="line number8 index7 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// base case</code></div>
                                                                <div class="line number9 index8 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=keyword>if</code> <code
                                                                        class=plain>(n &lt; </code><code
                                                                        class=value>0</code><code
                                                                        class=plain>)&nbsp;</code>
                                                                </div>
                                                                <div class="line number10 index9 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class=keyword>return</code> <code
                                                                        class=value>0</code><code class=plain>;</code>
                                                                </div>
                                                                <div class="line number11 index10 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=keyword>if</code> <code
                                                                        class=plain>(n == </code><code
                                                                        class=value>0</code><code class=plain>)</code>
                                                                </div>
                                                                <div class="line number12 index11 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class=keyword>return</code> <code
                                                                        class=value>1</code><code class=plain>;</code>
                                                                </div>
                                                                <div class="line number13 index12 alt2">&nbsp;</div>
                                                                <div class="line number14 index13 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// checking if already calculated</code>
                                                                </div>
                                                                <div class="line number15 index14 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=keyword>if</code> <code
                                                                        class=plain>(dp[n]!=-</code><code
                                                                        class=value>1</code><code class=plain>)</code>
                                                                </div>
                                                                <div class="line number16 index15 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code
                                                                        class=keyword>return</code> <code
                                                                        class=plain>dp[n];</code></div>
                                                                <div class="line number17 index16 alt2">&nbsp;</div>
                                                                <div class="line number18 index17 alt1"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=comments>// storing the result and returning</code>
                                                                </div>
                                                                <div class="line number19 index18 alt2"><code
                                                                        class="undefined spaces">&nbsp;&nbsp;</code><code
                                                                        class=keyword>return</code> <code
                                                                        class=plain>dp[n] = solve(n-</code><code
                                                                        class=value>1</code><code
                                                                        class=plain>) + solve(n-</code><code
                                                                        class=value>3</code><code
                                                                        class=plain>) + solve(n-</code><code
                                                                        class=value>5</code><code class=plain>);</code>
                                                                </div>
                                                                <div class="line number20 index19 alt1"><code
                                                                        class=plain>}</code></div>
                                                                <div class="line number21 index20 alt2">&nbsp;</div>
                                                            </div>
                                                        </td>
                                                    </tr>
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    <div class=code-editor-container></div>
                                    </p>
                                </div>
                                <div class=code-output-container>
                                    <div class=output-block><i id=output-icon title=Output
                                            class="gfg-icon gfg-icon_arrow-right-editor padding-2px code-sidebar-button output-icon"></i>
                                        </p>
                                        <pre class=output-pre></pre>
                                        </p>
                                    </div>
                                    <div class=ide-link-div><i id=copy-url-button title="Copy Generated Ide URL"
                                            class="gfg-icon gfg-icon_copy padding-2px code-sidebar-button copy-url-button"></i>
                                        </p>
                                        <pre id=ide-url></pre>
                                        </p>
                                    </div>
                                    </p>
                                </div>
                            </div>
                            <p><strong>Time Complexity: </strong>O(n), As we just need to make 3n function calls and
                                there will
                                be no
                                repetitive calculations as we are returning previously calculated
                                results.<br><strong>Auxiliary
                                    Space:</strong> O(n), The extra space is used due to the recursion call stack.</p>
                            <p>Another way is to add tabulation and make the solution iterative. Please refer to <a
                                    href="/Tabulation">tabulation and
                                memoization</a> for
                                more details.
        </blockquote>
    </div>


    <%- include('partials/footer'); -%>